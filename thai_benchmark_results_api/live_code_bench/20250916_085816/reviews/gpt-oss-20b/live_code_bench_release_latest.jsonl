{"index": 0, "input": "**User**: \n### Question:\nThere are three cards with letters $\\texttt{a}$, $\\texttt{b}$, $\\texttt{c}$ placed in a row in some order. You can do the following operation at most once: \n\n \n-  Pick two cards, and swap them.  Is it possible that the row becomes $\\texttt{abc}$ after the operation? Output \"YES\" if it is possible, and \"NO\" otherwise.\n\nInput\n\nThe first line contains a single integer $t$ ($1 \\leq t \\leq 6$)Â â€” the number of test cases.\n\nThe only line of each test case contains a single string consisting of each of the three characters $\\texttt{a}$, $\\texttt{b}$, and $\\texttt{c}$ exactly once, representing the cards.\n\nOutput\n\nFor each test case, output \"YES\" if you can make the row $\\texttt{abc}$ with at most one operation, or \"NO\" otherwise.\n\nYou can output the answer in any case (for example, the strings \"yEs\", \"yes\", \"Yes\" and \"YES\" will be recognized as a positive answer).Sample Input 1:\n6\n\nabc\n\nacb\n\nbac\n\nbca\n\ncab\n\ncba\n\n\n\nSample Output 1:\n\nYES\nYES\nYES\nNO\nNO\nYES\n\n\nNote\n\nIn the first test case, we don't need to do any operations, since the row is already $\\texttt{abc}$.\n\nIn the second test case, we can swap $\\texttt{c}$ and $\\texttt{b}$: $\\texttt{acb} \\to \\texttt{abc}$.\n\nIn the third test case, we can swap $\\texttt{b}$ and $\\texttt{a}$: $\\texttt{bac} \\to \\texttt{abc}$.\n\nIn the fourth test case, it is impossible to make $\\texttt{abc}$ using at most one operation.\n\n### Format: Read the inputs from stdin solve the problem and write the answer to stdout (do not directly test on the sample inputs). Enclose your code within delimiters as follows.\n```python\n# YOUR CODE HERE\n```\n\n ### Answer: (use the provided format with backticks)\n\n", "target": "", "sample_score": {"score": {"value": {"pass": 1.0}, "extracted_prediction": "# YOUR CODE HERE\nimport sys\n\ndef solve() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    target = \"abc\"\n    for i in range(1, t + 1):\n        s = data[i]\n        # Count mismatches with \"abc\"\n        mismatches = sum(1 for a, b in zip(s, target) if a != b)\n        # If mismatches <= 2, we can fix with at most one swap\n        out_lines.append(\"YES\" if mismatches <= 2 else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    solve()", "prediction": "```python\n# YOUR CODE HERE\nimport sys\n\ndef solve() -> None:\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    t = int(data[0])\n    out_lines = []\n    target = \"abc\"\n    for i in range(1, t + 1):\n        s = data[i]\n        # Count mismatches with \"abc\"\n        mismatches = sum(1 for a, b in zip(s, target) if a != b)\n        # If mismatches <= 2, we can fix with at most one swap\n        out_lines.append(\"YES\" if mismatches <= 2 else \"NO\")\n    sys.stdout.write(\"\\n\".join(out_lines))\n\nif __name__ == \"__main__\":\n    solve()\n```", "explanation": "Pass@1: 100.0%", "metadata": {"pass_rate": 1.0, "timeout": 6, "debug": false, "eval_results": {"0": [[true, true, true, true, true]]}, "final_metadata": [["{\"execution time\": 0.015488386154174805}"]]}, "main_score_name": "pass"}, "sample_id": 0, "group_id": 0, "sample_metadata": null}}
