{"index": 0, "input": "**User**: \nRead the following function signature and docstring, and fully implement the function described. Your response should only contain the code for this function.\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "target": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "sample_score": {"score": {"value": {"pass": true}, "extracted_prediction": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in the given list of numbers, any two numbers are closer to each other\n    than the specified threshold.\n\n    The function returns ``True`` if there exists a pair of distinct indices\n    ``i`` and ``j`` such that ``abs(numbers[i] - numbers[j]) < threshold``.\n    Otherwise it returns ``False``.\n\n    Parameters\n    ----------\n    numbers : List[float]\n        The list of numbers to examine.\n    threshold : float\n        The distance threshold.  If ``threshold`` is less than or equal to\n        zero, the function will always return ``False`` because no two\n        distinct numbers can have a negative or zero distance.\n\n    Examples\n    --------\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Quick exit for trivial cases\n    if len(numbers) < 2 or threshold <= 0:\n        return False\n\n    # Sort the numbers to only need to check adjacent pairs\n    sorted_nums = sorted(numbers)\n    for i in range(1, len(sorted_nums)):\n        if sorted_nums[i] - sorted_nums[i - 1] < threshold:\n            return True\n    return False\n", "prediction": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"Check if in the given list of numbers, any two numbers are closer to each other\n    than the specified threshold.\n\n    The function returns ``True`` if there exists a pair of distinct indices\n    ``i`` and ``j`` such that ``abs(numbers[i] - numbers[j]) < threshold``.\n    Otherwise it returns ``False``.\n\n    Parameters\n    ----------\n    numbers : List[float]\n        The list of numbers to examine.\n    threshold : float\n        The distance threshold.  If ``threshold`` is less than or equal to\n        zero, the function will always return ``False`` because no two\n        distinct numbers can have a negative or zero distance.\n\n    Examples\n    --------\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Quick exit for trivial cases\n    if len(numbers) < 2 or threshold <= 0:\n        return False\n\n    # Sort the numbers to only need to check adjacent pairs\n    sorted_nums = sorted(numbers)\n    for i in range(1, len(sorted_nums)):\n        if sorted_nums[i] - sorted_nums[i - 1] < threshold:\n            return True\n    return False\n", "explanation": "passed", "metadata": {"task_id": "HumanEval/0", "timeout": 4, "execution_result": {"task_id": "HumanEval/0", "passed": true, "result": "passed", "completion_id": null}}, "main_score_name": "pass"}, "sample_id": 0, "group_id": 0, "sample_metadata": {"task_id": "HumanEval/0", "entry_point": "has_close_elements", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"}}}
